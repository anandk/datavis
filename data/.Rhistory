read.csv("trial.csv",colClasses=c(NA,NA,NA,"NULL",rep("NULL",4)))
read.csv("trial.csv",colClasses=c(NA,NA,NA,"NULL",rep("NULL",4)))
read.csv("trial.csv",colClasses=c(NA,NA,NA,"NULL")
.
read.csv("trial.csv",colClasses=c(NA,NA,NA,"NULL"))
read.csv("trial.csv",colClasses=c(NA,NA,NA,"NULL"))
library(googleVis)
demo(WordlBank)
demo(WorldBank)
demo(WorldBank)
write.csv(subData,file="WorldBankData.csv")
write.csv(subData,file="WorldBankData1.csv",rownames=F)
write.csv(subData,file="WorldBankData1.csv",rowNames=F)
write.csv(subData,file="WorldBankData1.csv",rowName=F)
write.csv(subData,file="WorldBankData1.csv",rowname=F)
write.csv(subData,file="WorldBankData1.csv",row.names=F)
rowNum(subData)
rownum(subData)
?rownums
require(Rook)
require(googleVis)
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
my.app <- function(env){
## Start with a table and allow the user to upload a CSV-file
req <- Request$new(env)
res <- Response$new()
## Provide some data to start with
## Exports is a sample data set of googleVis
data <- Exports[,1:2]
## Add functionality to upload CSV-file
if (!is.null(req$POST())) {
## Read data from uploaded CSV-file
data <- req$POST()[["data"]]
data <- read.csv(data$tempfile)
}
## Create table with googleVis
tbl <- gvisTable(data,
options=list(gvis.editor="Edit me!",
height=350),
chartid="myInitialView")
## Write the HTML output and
## make use of the googleVis HTML output.
## See vignette('googleVis') for more details
res$write(tbl$html$header)
res$write("<h1>My first Rook app with googleVis</h1>")
res$write(tbl$html$chart)
res$write('
Read CSV file:<form method="POST" enctype="multipart/form-data">
<input type="file" name="data">
<input type="submit" name="Go">\n</form>')
res$write(tbl$html$footer)
res$finish()
}
s$add(app=my.app, name='googleVisTable')
## Open a browser window and display the web app
s$browse('googleVisTable')
require(Rook)
require(googleVis)
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
my.app <- function(env){
## Start with a table and allow the user to upload a CSV-file
req <- Request$new(env)
res <- Response$new()
## Provide some data to start with
## Exports is a sample data set of googleVis
data <- Exports[,1:2]
## Add functionality to upload CSV-file
if (!is.null(req$POST())) {
## Read data from uploaded CSV-file
data <- req$POST()[["data"]]
data <- read.csv(data$tempfile)
}
## Create table with googleVis
tbl <- gvisTable(data,
options=list(gvis.editor="Edit me!",
height=350),
chartid="myInitialView")
## Write the HTML output and
## make use of the googleVis HTML output.
## See vignette('googleVis') for more details
res$write(tbl$html$header)
res$write("<h1>Quick & Dirty</h1>")
res$write(tbl$html$chart)
res$write('
Read CSV file:<form method="POST" enctype="multipart/form-data">
<input type="file" name="data">
<input type="submit" name="Go">\n</form>')
res$write(tbl$html$footer)
res$finish()
}
s$add(app=my.app, name='googleVisTable')
## Open a browser window and display the web app
s$browse('googleVisTable')
rnorm(seq(1:30))
rnorm(10)
?rnorm
?runif
rnorm(10,1,40)
?sample
sample(seq(1:10),5)
sample(seq(1:10),30)
sample(seq(1:40),30)
x <-1:30
y = sample(x,15)
setdiff(x,y)
y
?setdiff
sys.time
??time
system.time(setdiff(x,y))
x<-sample(seq(1:300),100)
which(abs(diff(x))>3)
diff(x)
abs(diff(x))
abs(diff(x))>3
x
sample(seq(1:20),repeat=T)
sample(seq(1:20),30,repeat=T)
sample(seq(1:20),30,replace=T)
x <- sample(seq(1:20),30,replace=T)
which(abs(diff(x))>3)
x
system.time(which(abs(diff(x))>3))
fn <- function(x){}
fn <- function(x){
y<-sample(seq(1:20),30,replace=T)
for(i in 2:length(y)){
if(abs(y[i]-y[i-1])>3)
{
print(i)
}
}
}
fn(3)
system.time(fn(3))
system.time(which(abs(diff(x))>3))
getwd(0)
getwd()
df = read.csv("CSVSample.csv")
df
fn <- function(x){
y<-sample(seq(1:40),300,replace=T)
for(i in 2:length(y)){
if(abs(y[i]-y[i-1])>3)
{
print(i)
}
}
}
system.time(fn(3))
fn <- function(x){
y<-sample(seq(1:400),3000,replace=T)
for(i in 2:length(y)){
if(abs(y[i]-y[i-1])>3)
{
print(i)
}
}
}
system.time(fn(3))
x <- sample(seq(1:400),3000,replace=T)
system.time(which(abs(diff(x))>3))
library(googleVis)
plot(gvisPieChart(df))
fn <- function(x){
y<-sample(seq(1:400),3000,replace=T)
for(i in 2:length(y)){
if(abs(y[i]-y[i-1])>3)
{
print(i)
}
}
}
fn(3)
fn <- function(x){
y<-sample(seq(1:400),3000,replace=T)
for(i in 2:length(y)){
if(abs(y[i]-y[i-1])>x)
{
print(i)
}
}
}
which(abs(diff(x))>3))
which(abs(diff(x))>3)
system.time(which(abs(diff(x))>3))
x
x
x <- sample(seq(1:20),10)
x
which(abs(diff(x))>3)
system.time(fn(3))
?merge
x <- c(1,2,5,7,9)
y <- c(1,2,6,8,9,10)
df1 = cbind(c(10,20,50,70,90),x)
df1
df2 <- cbind (c(11,22,66,88,99,110),y)
names(df1) = c("price","time")
names(df2) = c("price","time")
df1
names(df1)
name(df1)
colnames(df1)
df1 = cbind(c(10,20,50,70,90),x)
df2 <- cbind (c(11,22,66,88,99,110),y)
df1
colnames(df1) = c("Price","Time")
colnames(df2) = c("Price","Time")
df1
merge(df1,df2,all.x=True,all.y=True)
merge(df1,df2,all.x=T,all.y=T)
??correlation matrix
??correlation
as.matrix(cor(df1))
df1
as.matrix(cor(df1,df2))
df1
df2
as.matrix(cor(df1,df2[-6,]))
cor(df1,df2[-6,])
merge(df1,df2,all.x=T,all.y=T, by = "Time")
merge(df1,df2,all=T, by = "Time")
df3 <- merge(df1,df2,all=T, by = "Time")
merge(df1,df3,by.x="Price",by.y="Price.x")
merge(df1,df3,by="Time",all.y=T)
na.locf(df3$Price.x)
?na.locf
??na.locf
install.packages("zoo")
library(zoo)
na.locf(df3$Price.x)
?na.locf
?zoo
?package
??package
packageDescription(zoo)
packageDescription("zoo")
rnorm
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
dataFrameSubset = dataFrame[dataFrame$heightsCM > 188,]
dataFrameSubset
mean(dataFrameSubset$weightsK)
??cauchy
rcauchy(10)
set.seed(41)
rcauchy(10)
rcauchy(10)
rcauchy(10)
set.seed(41)
rcauchy(10)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
sample(cauchyValues,size=10,replace=T)
?setwd
package("tm")
?package
??package
packages("tm")
install("tm")
install.packages("tm")
install.packages("e1071")
install.packages("openNLP")
install.packages("openNLPmodels.en")
install.packages("tm")
install.packages("e1071")
install.packages("openNLP")
install.packages("openNLPmodels.en")
install.packages("plyr")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("lattice")
install.packages("knitr")
install.packages("shiny")
??random
?sample
with
?with
library(datasets)
x=cars[,2]
y=cars[,1]
yhatsp=predict(smooth.spline(x,y),x)$y
MSE=mean((y-yhatsp)^2)
fix(x)
fix(x)
fix(y)
fix(yhatsp)
library(datasets)
x=cars[,2]
y=cars[,1]
x
y
yhatsp=predict(smooth.spline(x,y),x)$y
MSE=mean((y-yhatsp)^2)
x
yhatsp
parcoord(state.x77[, c(7, 4, 6, 2, 5, 3)])
ir <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
parcoord(log(ir)[, c(3, 4, 2, 1)], col = 1 + (0:149)%/%50)
library(MASS)
parcoord(state.x77[, c(7, 4, 6, 2, 5, 3)])
ir <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
parcoord(log(ir)[, c(3, 4, 2, 1)], col = 1 + (0:149)%/%50)
require(devtools)
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010))
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year")
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year", play = TRUE)
ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010))
violent_crime
library(rMaps)
something=crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
summary(something)
summary
something
Crosslet
something.html()
something.html
something.getClass()
class
something$getClass()
something$html()
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
getwd(0)
getwd()
web_index
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
web_index
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
setwd("C:/TW-Projects/DataAnalytics/DataVisualisation/Sandbox/data")
var world_ghi = read.csv("GHI-Global.csv")
world_ghi = read.csv("GHI-Global.csv")
world_ghi
world_ghi = read.csv("GHI-Global.csv")
head(world_ghi)
library(rMaps)
crosslet(
x = "Country",
y = c("GHI", "Undernourished", "Underweight", "Under5MR"),
data = world_ghi
)
head(web_index)
world_ghi = world_ghi[2:6,]
world_ghi
library(rMaps)
crosslet(
x = "Country",
y = c("GHI", "Undernourished", "Underweight", "Under5MR"),
data = world_ghi
)
class(web_index)
web_index[1:5,]
library(rMaps)
crosslet(
x = "country",
y = c("web_index"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = "web_index",
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c( "universal_access"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = "universal_access",
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("universal_access"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access"),
data = web_index
)
library(rMaps)
crosslet(
x = "Country",
y = c("GHI", "Undernourished", "Underweight"),
data = world_ghi
)
world_ghi = read.csv("GHI-Global.csv")
library(rMaps)
crosslet(
x = "Country",
y = c("GHI", "Undernourished", "Underweight"),
data = world_ghi
)
library(rMaps)
objCross = crosslet(
x = "Country",
y = c("GHI", "Undernourished", "Underweight"),
data = world_ghi
)
View(ir)
View(world_ghi)
something$.->params
something->params
violent_crime
head(violent_crime)
ichoropleth
View(world_ghi)
ichoropleth(GHI~Country, data=world_ghi)
ichoropleth(GHI~Country, data=world_ghi, na.rm=TRUE)
ichoropleth(GHI~Country, data=world_ghi[2:6,])
library(rMaps)
objCross = crosslet(
x = "Country",
y = c(Undernourished", "Underweight"),
data = world_ghi
)
library(rMaps)
objCross = crosslet(
x = "Country",
y = c("Undernourished", "Underweight"),
data = world_ghi
)
library(rMaps)
crosslet(
x = "Country",
y = c("Undernourished", "Underweight"),
data = world_ghi
)
web_index
view(web_index)
View(world_ghi)
View(web_index)
